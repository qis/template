# Toolchain
include_guard(GLOBAL)

# System
set(CMAKE_SYSTEM_NAME Windows CACHE STRING "" FORCE)
set(CMAKE_SYSTEM_VERSION 6.1 CACHE STRING "" FORCE)

string(REGEX MATCH "-windows-(x86|x64)-(debug|release)$" _ "${VCPKG_TARGET_TRIPLET}")
if(NOT CMAKE_MATCH_COUNT EQUAL 2)
  message(FATAL_ERROR "Invalid VCPKG_TARGET_TRIPLET: ${VCPKG_TARGET_TRIPLET}")
endif()

if(CMAKE_MATCH_1 STREQUAL x86)
  set(CMAKE_SYSTEM_PROCESSOR X86 CACHE STRING "" FORCE)
  set(TOOLCHAIN_ARCH "x86")
else()
  set(CMAKE_SYSTEM_PROCESSOR AMD64 CACHE STRING "" FORCE)
  set(TOOLCHAIN_ARCH "x64")
endif()

if(CMAKE_MATCH_2 STREQUAL debug)
  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "" FORCE)
else()
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

# Windows CRT
file(GLOB TOOLCHAIN_CRT_VERSIONS LIST_DIRECTORIES ON
  RELATIVE "${VS_ROOT}/VC/Tools/MSVC" "${VS_ROOT}/VC/Tools/MSVC/*")

set(TOOLCHAIN_CRT_VERSION "0")
foreach(version IN LISTS TOOLCHAIN_CRT_VERSIONS)
  if ("${version}" VERSION_GREATER "${TOOLCHAIN_CRT_VERSION}")
    set(TOOLCHAIN_CRT_VERSION "${version}")
  endif()
endforeach()
if(TOOLCHAIN_CRT_VERSION STREQUAL "0")
  message(FATAL_ERROR "Could not find Windows CRT: ${TOOLCHAIN_CRT_VERSIONS}")
endif()

set(TOOLCHAIN_CRT_ROOT "${VS_ROOT}/VC/Tools/MSVC/${TOOLCHAIN_CRT_VERSION}")
set(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES "${TOOLCHAIN_CRT_ROOT}/include" CACHE PATH "" FORCE)
link_directories(BEFORE "${TOOLCHAIN_CRT_ROOT}/lib/${TOOLCHAIN_ARCH}")

# Windows SDK
cmake_host_system_information(RESULT TOOLCHAIN_SDK_ROOT QUERY
  WINDOWS_REGISTRY "HKLM/SOFTWARE/Microsoft/Windows Kits/Installed Roots"
  VALUE "KitsRoot10" VIEW BOTH ERROR_VARIABLE TOOLCHAIN_SDK_ROOT_ERROR)
if (TOOLCHAIN_SDK_ROOT_ERROR)
  message(FATAL_ERROR "Could not find Windows SDK in registry: ${TOOLCHAIN_SDK_ROOT_ERROR}")
endif()
cmake_path(CONVERT "${TOOLCHAIN_SDK_ROOT}" TO_CMAKE_PATH_LIST TOOLCHAIN_SDK_ROOT NORMALIZE)
get_filename_component(TOOLCHAIN_SDK_ROOT "${TOOLCHAIN_SDK_ROOT}" ABSOLUTE)

file(GLOB TOOLCHAIN_SDK_VERSIONS LIST_DIRECTORIES ON
  RELATIVE "${TOOLCHAIN_SDK_ROOT}/Include" "${TOOLCHAIN_SDK_ROOT}/Include/*")

set(TOOLCHAIN_SDK_VERSION "0")
foreach(version IN LISTS TOOLCHAIN_SDK_VERSIONS)
  if ("${version}" VERSION_GREATER "${TOOLCHAIN_SDK_VERSION}")
    set(TOOLCHAIN_SDK_VERSION "${version}")
  endif()
endforeach()
if(TOOLCHAIN_SDK_VERSION STREQUAL "0")
  message(FATAL_ERROR "Could not find Windows SDK: ${TOOLCHAIN_SDK_VERSIONS}")
endif()

include_directories(BEFORE SYSTEM
  "${TOOLCHAIN_SDK_ROOT}/Include/${TOOLCHAIN_SDK_VERSION}/ucrt"
  "${TOOLCHAIN_SDK_ROOT}/Include/${TOOLCHAIN_SDK_VERSION}/shared"
  "${TOOLCHAIN_SDK_ROOT}/Include/${TOOLCHAIN_SDK_VERSION}/um"
  "${TOOLCHAIN_SDK_ROOT}/Include/${TOOLCHAIN_SDK_VERSION}/winrt"
  "${TOOLCHAIN_SDK_ROOT}/Include/${TOOLCHAIN_SDK_VERSION}/cppwinrt")

link_directories(BEFORE
  "${TOOLCHAIN_SDK_ROOT}/Lib/${TOOLCHAIN_SDK_VERSION}/ucrt/${TOOLCHAIN_ARCH}"
  "${TOOLCHAIN_SDK_ROOT}/Lib/${TOOLCHAIN_SDK_VERSION}/um/${TOOLCHAIN_ARCH}")

# Search Paths
list(PREPEND CMAKE_SYSTEM_PROGRAM_PATH
  "${TOOLCHAIN_CRT_ROOT}/bin/Hostx64/${TOOLCHAIN_ARCH}"
  "${TOOLCHAIN_SDK_ROOT}/bin/${TOOLCHAIN_SDK_VERSION}/${TOOLCHAIN_ARCH}")

# Compiler
find_program(CMAKE_MASM_ASM_COMPILER NAMES ml64 ml REQUIRED)
find_program(CMAKE_CXX_COMPILER NAMES cl REQUIRED)
find_program(CMAKE_C_COMPILER NAMES cl REQUIRED)

# Compiler Flags
set(CMAKE_CXX_STANDARD 20 CACHE STRING "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")
set(CMAKE_CXX_SCAN_FOR_MODULES OFF CACHE BOOL "")

set(CMAKE_C_FLAGS_INIT "/nologo /DWINVER=0x0601 /D_WIN32_WINNT=0x0601 /DNTDDI_VERSION=0x06010000")
set(CMAKE_CXX_FLAGS_INIT "${CMAKE_C_FLAGS_INIT}")

# Debug Information
cmake_policy(SET CMP0141 NEW)
set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "$<$<CONFIG:Debug>:EditAndContinue>" CACHE STRING "" FORCE)

# Runtime Library
cmake_policy(SET CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:DLL>" CACHE STRING "" FORCE)

# Interprocedural Optimization
cmake_policy(SET CMP0069 NEW)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON CACHE BOOL "" FORCE)

# Disable Default Warnings
cmake_policy(SET CMP0092 NEW)

# Linker
find_program(CMAKE_LINKER NAMES link REQUIRED)

# Tools
find_program(CMAKE_RC_COMPILER NAMES rc REQUIRED)
find_program(CMAKE_AR NAMES lib REQUIRED)
find_program(CMAKE_MT NAMES mt REQUIRED)

# Configurations
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug)
set(CMAKE_MAP_IMPORTED_CONFIG_DEBUG ";Release" CACHE STRING "")

# Platform Variables
set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
  BUILD_SHARED_LIBS
  CMAKE_BUILD_RPATH
  CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES
  CMAKE_CXX_STANDARD_LINK_DIRECTORIES
  CMAKE_CXX_STANDARD_LIBRARIES
  CMAKE_TOOLCHAIN_FILE
  CACHE STRING "")
